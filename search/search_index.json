{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Monkey365 Monkey365 is an Open Source security tool that can be used to easily conduct not only Microsoft 365, but also Azure subscriptions and Azure Active Directory security configuration reviews without the significant overhead of learning tool APIs or complex admin panels from the start. Monkey365 has been designed to tackle these difficulties and get results fast and without any requirements. The results will be visualised in a simplified HTML report to quickly identify potential issues. As such, security consultants will be able to effectively address issues from a single vulnerability report. To help with this effort, Monkey365 also provides several ways to identify security gaps in the desired tenant setup and configuration. Monkey365 provides valuable recommendations on how to best configure those settings to get the most out of your Microsoft 365 tenant or Azure subscription. Architecture Monkey365 works in three phases. In the first phase, plugins will issue queries against the multiple data sources to retrieve the desired metadata about targeted tenant or subscription, and then will collect information. Once all the necessary metadata is collected, the result is passed to an internal module in order to start the verifying phase, in which the tool uses the data collected in first phase to perform query search with a default set of rules, as a mechanism to evaluate the configuration and to search for potential misconfigurations and security issues. The third phase starts to generate reports, such as an Excel spreadsheet containing raw data, or a more intuitive HTML report containing structured data for quick checking and verification of the results.","title":"Home"},{"location":"#monkey365","text":"Monkey365 is an Open Source security tool that can be used to easily conduct not only Microsoft 365, but also Azure subscriptions and Azure Active Directory security configuration reviews without the significant overhead of learning tool APIs or complex admin panels from the start. Monkey365 has been designed to tackle these difficulties and get results fast and without any requirements. The results will be visualised in a simplified HTML report to quickly identify potential issues. As such, security consultants will be able to effectively address issues from a single vulnerability report. To help with this effort, Monkey365 also provides several ways to identify security gaps in the desired tenant setup and configuration. Monkey365 provides valuable recommendations on how to best configure those settings to get the most out of your Microsoft 365 tenant or Azure subscription.","title":"Monkey365"},{"location":"#architecture","text":"Monkey365 works in three phases. In the first phase, plugins will issue queries against the multiple data sources to retrieve the desired metadata about targeted tenant or subscription, and then will collect information. Once all the necessary metadata is collected, the result is passed to an internal module in order to start the verifying phase, in which the tool uses the data collected in first phase to perform query search with a default set of rules, as a mechanism to evaluate the configuration and to search for potential misconfigurations and security issues. The third phase starts to generate reports, such as an Excel spreadsheet containing raw data, or a more intuitive HTML report containing structured data for quick checking and verification of the results.","title":"Architecture"},{"location":"about/","text":"Monkey365 Monkey365 is an Open Source security tool that can be used to easily conduct not only Microsoft 365, but also Azure subscriptions and Azure Active Directory security configuration reviews without the significant overhead of learning tool APIs or complex admin panels from the start. Monkey365 has been designed to tackle these difficulties and get results fast and without any requirements. The results will be visualised in a simplified HTML report to quickly identify potential issues. As such, security consultants will be able to effectively address issues from a single vulnerability report. To help with this effort, Monkey365 also provides several ways to identify security gaps in the desired tenant setup and configuration. Monkey365 provides valuable recommendations on how to best configure those settings to get the most out of your Microsoft 365 tenant or Azure subscription.","title":"Monkey365"},{"location":"about/#monkey365","text":"Monkey365 is an Open Source security tool that can be used to easily conduct not only Microsoft 365, but also Azure subscriptions and Azure Active Directory security configuration reviews without the significant overhead of learning tool APIs or complex admin panels from the start. Monkey365 has been designed to tackle these difficulties and get results fast and without any requirements. The results will be visualised in a simplified HTML report to quickly identify potential issues. As such, security consultants will be able to effectively address issues from a single vulnerability report. To help with this effort, Monkey365 also provides several ways to identify security gaps in the desired tenant setup and configuration. Monkey365 provides valuable recommendations on how to best configure those settings to get the most out of your Microsoft 365 tenant or Azure subscription.","title":"Monkey365"},{"location":"authentication/","text":"Monkey365 offers many ways to connect to both Azure and Microsoft 365 environments. This section covers the authentication process against Azure or Microsoft 365, as well as the supported authentication options, including: Interactive browser authentication Authentication with a username and password Device Code Authentication Client Credential Authentication Interactive browser authentication Interactive browser authentication enables the monkey 365 PowerShell module for all operations allowed by the interactive login credentials. Please, note that if you are using a user with owner or administrator permissions within the subscription in scope, the monkey365 tool will inherent these permissions to all resources in that subscription without having to assign any specific permissions. Please, see the permissions for further details. Resource Owner Password Credentials The Microsoft identity platform supports the OAuth 2.0 Resource Owner Password Credentials (ROPC) grant, which allows an application to sign in the user by directly handling their password. In this flow, client identification (e.g. user's email address) and user's credentials is sent to the identity server, and then a token is received. Device code authentication Interactive authentication with Azure Active Directory requires a web browser. However, in operating systems that do not provide a Web browser, such as containers, command line tools or non-gui systems, Device code flow lets the user use another computer to sign-in interactively. The tokens will be obtained through a two-step process. Client credential authentication This type of grant is commonly used for machine-to-machine interactions that must run in the background, such as daemons, or service accounts. In this case, Azure AD authenticates and authorizes the app rather than a user. During this step, the client has to authenticate itself to Azure AD. The Microsoft identity platform allows the confidential client to authenticate using a shared secret, certificate or federated credential.","title":"Authentication"},{"location":"authentication/#interactive-browser-authentication","text":"Interactive browser authentication enables the monkey 365 PowerShell module for all operations allowed by the interactive login credentials. Please, note that if you are using a user with owner or administrator permissions within the subscription in scope, the monkey365 tool will inherent these permissions to all resources in that subscription without having to assign any specific permissions. Please, see the permissions for further details.","title":"Interactive browser authentication"},{"location":"authentication/#resource-owner-password-credentials","text":"The Microsoft identity platform supports the OAuth 2.0 Resource Owner Password Credentials (ROPC) grant, which allows an application to sign in the user by directly handling their password. In this flow, client identification (e.g. user's email address) and user's credentials is sent to the identity server, and then a token is received.","title":"Resource Owner Password Credentials"},{"location":"authentication/#device-code-authentication","text":"Interactive authentication with Azure Active Directory requires a web browser. However, in operating systems that do not provide a Web browser, such as containers, command line tools or non-gui systems, Device code flow lets the user use another computer to sign-in interactively. The tokens will be obtained through a two-step process.","title":"Device code authentication"},{"location":"authentication/#client-credential-authentication","text":"This type of grant is commonly used for machine-to-machine interactions that must run in the background, such as daemons, or service accounts. In this case, Azure AD authenticates and authorizes the app rather than a user. During this step, the client has to authenticate itself to Azure AD. The Microsoft identity platform allows the confidential client to authenticate using a shared secret, certificate or federated credential.","title":"Client credential authentication"},{"location":"basic-usage/","text":"The following command will provide the list of available command line options: Get-Help Invoke-Monkey365 To get a list of examples use: Get-Help Invoke-Monkey365 -Examples To get a list of all options and examples with detailed info use: Get-Help Invoke-Monkey365 -Detailed This example retrieves information from Azure AD and SharePoint Online and then print results. If credentials are not supplied, Monkey365 will prompt for credentials. $param = @{ Instance = 'Office365'; Analysis = 'SharePointOnline'; PromptBehavior = 'SelectAccount'; IncludeAzureActiveDirectory = $true; ExportTo = 'PRINT'; } $assets = Invoke-Monkey365 @param This example retrieves information from specific Azure subscription and Tenant and prints results to a local variable. If credentials are not supplied, Monkey365 will prompt for credentials. $param = @{ Instance = 'Azure'; Analysis = 'All'; PromptBehavior = 'SelectAccount'; subscriptions = '00000000-0000-0000-0000-000000000000'; TenantID = '00000000-0000-0000-0000-000000000000'; ExportTo = 'PRINT'; } $assets = Invoke-Monkey365 @param This example retrieves information from specific Azure subscription and Tenant and will export data driven to CSV, JSON, HTML, XML and Excel format into monkey-reports folder. The script will connect to Azure using the client credential flow. $param = @{ ClientId = '00000000-0000-0000-0000-000000000000'; ClientSecret = (\"MySuperClientSecret\" | ConvertTo-SecureString -AsPlainText -Force) Instance = 'Azure'; Analysis = 'All'; subscriptions = '00000000-0000-0000-0000-000000000000'; TenantID = '00000000-0000-0000-0000-000000000000'; ExportTo = 'CLIXML,EXCEL,CSV,JSON,HTML'; } $assets = Invoke-Monkey365 @param This example retrieves information from specific Azure subscription and Tenant and will export data driven to CSV, JSON, HTML, XML and Excel format into monkey-reports folder. The script will connect to Azure using the client credential flow. $param = @{ ClientId = '00000000-0000-0000-0000-000000000000'; certificate = 'C:\\monkey365\\testapp.pfx'; CertFilePassword = (\"MySuperCertSecret\" | ConvertTo-SecureString -AsPlainText -Force); Instance = 'Office365'; Analysis = 'SharePointOnline'; subscriptions = '00000000-0000-0000-0000-000000000000'; TenantID = '00000000-0000-0000-0000-000000000000'; ExportTo = 'CLIXML,EXCEL,CSV,JSON,HTML'; } $assets = Invoke-Monkey365 @param","title":"Basic Usage"},{"location":"disclaimer/","text":"Disclaimers, and the Azure Penetration testing policy To the best of our knowledge Monkey365's plugins are compliant with the Azure Penetration testing policy, but as a modular tool, we cannot guarantee this will be the case in every situation. It is entirely your responsibility to ensure that you know such requirements and how you use Monkey365 is compliant with the Azure Penetration testing policy. Although notifying Microsoft of pen testing activities is no longer required you must still comply with the Microsoft Cloud Unified Penetration Testing Rules of Engagement As with any other security tool, it is your responsibility to get proper authorization before using Monkey365 outside of your tenant/subscription. Please note that this PowerShell module was designed to help companies to make both Azure and Microsoft365 more secure and should never be used maliciously. Monkey365 is software that comes with absolutely no warranties, either implied or explicit. By using Monkey365, you take full responsibility with any action taken using this software.","title":"Disclaimer"},{"location":"disclaimer/#disclaimers-and-the-azure-penetration-testing-policy","text":"To the best of our knowledge Monkey365's plugins are compliant with the Azure Penetration testing policy, but as a modular tool, we cannot guarantee this will be the case in every situation. It is entirely your responsibility to ensure that you know such requirements and how you use Monkey365 is compliant with the Azure Penetration testing policy. Although notifying Microsoft of pen testing activities is no longer required you must still comply with the Microsoft Cloud Unified Penetration Testing Rules of Engagement As with any other security tool, it is your responsibility to get proper authorization before using Monkey365 outside of your tenant/subscription. Please note that this PowerShell module was designed to help companies to make both Azure and Microsoft365 more secure and should never be used maliciously. Monkey365 is software that comes with absolutely no warranties, either implied or explicit. By using Monkey365, you take full responsibility with any action taken using this software.","title":"Disclaimers, and the Azure Penetration testing policy"},{"location":"helo/","text":"Welcome to GitHub Pages \ud83d\ude80 \ud83d\udc3c yes You can use the editor on GitHub to maintain and preview the content for your website in Markdown files. Whenever you commit to this repository, GitHub Pages will run Jekyll to rebuild the pages in your site, from the content in your Markdown files. Markdown Markdown is a lightweight and easy-to-use syntax for styling your writing. It includes conventions for Syntax highlighted code block # Header 1 ## Header 2 ### Header 3 - Bulleted - List 1. Numbered 2. List **Bold** and _Italic_ and `Code` text [Link](url) and ![Image](src) For more details see GitHub Flavored Markdown . Jekyll Themes Your Pages site will use the layout and styles from the Jekyll theme you have selected in your repository settings . The name of this theme is saved in the Jekyll _config.yml configuration file. Support or Contact Having trouble with Pages? Check out our documentation or contact support and we\u2019ll help you sort it out.","title":"Helo"},{"location":"helo/#welcome-to-github-pages","text":"\ud83d\ude80 \ud83d\udc3c yes You can use the editor on GitHub to maintain and preview the content for your website in Markdown files. Whenever you commit to this repository, GitHub Pages will run Jekyll to rebuild the pages in your site, from the content in your Markdown files.","title":"Welcome to GitHub Pages"},{"location":"helo/#markdown","text":"Markdown is a lightweight and easy-to-use syntax for styling your writing. It includes conventions for Syntax highlighted code block # Header 1 ## Header 2 ### Header 3 - Bulleted - List 1. Numbered 2. List **Bold** and _Italic_ and `Code` text [Link](url) and ![Image](src) For more details see GitHub Flavored Markdown .","title":"Markdown"},{"location":"helo/#jekyll-themes","text":"Your Pages site will use the layout and styles from the Jekyll theme you have selected in your repository settings . The name of this theme is saved in the Jekyll _config.yml configuration file.","title":"Jekyll Themes"},{"location":"helo/#support-or-contact","text":"Having trouble with Pages? Check out our documentation or contact support and we\u2019ll help you sort it out.","title":"Support or Contact"},{"location":"install-instructions/","text":"This section covers the process of installing Monkey365 module from GitHub using PowerShell. Operating System Support The Monkey365 codebase was upgraded to support PowerShell Core and MSAL, which is the new authentication platform library for both Azure and Microsoft 365. These new features make the code OS independent. It has been tested on Windows, Linux (Ubuntu, Debian), as well as on Ubuntu-On-Windows. The following platforms are supported: Windows PowerShell 5.1 with .NET Framework 4.7.2 or greater PowerShell 7.1 or greater on Linux and Windows Prerequisites Monkey365 works out of the box with PowerShell. You can check your PowerShell version executing the command $PsVersionTable PS C:\\Users\\monkeyuser> $PSVersionTable Name Value ---- ----- PSVersion 7.2.4 PSEdition Core GitCommitId 7.2.4 OS Microsoft Windows 10.0.19044 Platform Win32NT PSCompatibleVersions {1.0, 2.0, 3.0, 4.0\u2026} PSRemotingProtocolVersion 2.3 SerializationVersion 1.1.0.1 WSManStackVersion 3.0 Install PowerShell on non-Windows platforms PowerShell 7.x can be installed on macOS, Linux, and Windows but is not installed by default. For installation on non-Windows systems (i.e., Linux or macOS) please refer to the installation notes on Microsoft: Get PowerShell Install Monkey365 Git # change path to Module directory PS C:\\Users\\monkeyuser> Push-Location ~\\Documents\\WindowsPowerShell\\Modules # clone repository PS C:\\Users\\monkeyuser\\Documents\\WindowsPowerShell\\Modules> git clone https://github.com/silverhack/monkey365.git # return to original location PS C:\\Users\\monkeyuser\\Documents\\WindowsPowerShell\\Modules> Pop-Location Manual You can download the latest zip by clicking here . Once downloaded, you must extract the file and extract the files to a suitable directory. Once you have unzipped the zip file, you can use the PowerShell V3 Unblock-File cmdlet to unblock files Get-ChildItem -Recurse c:\\monkey365 | Unblock-File Import module Once you have installed the monkey365 module on your system, you will likely want to import the module with the Import-Module cmdlet. Assuming that monkey365 is located in the PSModulePath , PowerShell would load monkey365 into active memory: Import-Module monkey365 If monkey365 is not located on a PSModulePath path, you can use an explicit path to import: Import-Module C:\\temp\\monkey365 You can also use the Force parameter in case you want to reimport the monkey365 module into the same session Import-Module C:\\temp\\monkey365 -Force","title":"Installation"},{"location":"install-instructions/#operating-system-support","text":"The Monkey365 codebase was upgraded to support PowerShell Core and MSAL, which is the new authentication platform library for both Azure and Microsoft 365. These new features make the code OS independent. It has been tested on Windows, Linux (Ubuntu, Debian), as well as on Ubuntu-On-Windows. The following platforms are supported: Windows PowerShell 5.1 with .NET Framework 4.7.2 or greater PowerShell 7.1 or greater on Linux and Windows","title":"Operating System Support"},{"location":"install-instructions/#prerequisites","text":"Monkey365 works out of the box with PowerShell. You can check your PowerShell version executing the command $PsVersionTable PS C:\\Users\\monkeyuser> $PSVersionTable Name Value ---- ----- PSVersion 7.2.4 PSEdition Core GitCommitId 7.2.4 OS Microsoft Windows 10.0.19044 Platform Win32NT PSCompatibleVersions {1.0, 2.0, 3.0, 4.0\u2026} PSRemotingProtocolVersion 2.3 SerializationVersion 1.1.0.1 WSManStackVersion 3.0","title":"Prerequisites"},{"location":"install-instructions/#install-powershell-on-non-windows-platforms","text":"PowerShell 7.x can be installed on macOS, Linux, and Windows but is not installed by default. For installation on non-Windows systems (i.e., Linux or macOS) please refer to the installation notes on Microsoft: Get PowerShell","title":"Install PowerShell on non-Windows platforms"},{"location":"install-instructions/#install-monkey365","text":"","title":"Install Monkey365"},{"location":"install-instructions/#git","text":"# change path to Module directory PS C:\\Users\\monkeyuser> Push-Location ~\\Documents\\WindowsPowerShell\\Modules # clone repository PS C:\\Users\\monkeyuser\\Documents\\WindowsPowerShell\\Modules> git clone https://github.com/silverhack/monkey365.git # return to original location PS C:\\Users\\monkeyuser\\Documents\\WindowsPowerShell\\Modules> Pop-Location","title":"Git"},{"location":"install-instructions/#manual","text":"You can download the latest zip by clicking here . Once downloaded, you must extract the file and extract the files to a suitable directory. Once you have unzipped the zip file, you can use the PowerShell V3 Unblock-File cmdlet to unblock files Get-ChildItem -Recurse c:\\monkey365 | Unblock-File","title":"Manual"},{"location":"install-instructions/#import-module","text":"Once you have installed the monkey365 module on your system, you will likely want to import the module with the Import-Module cmdlet. Assuming that monkey365 is located in the PSModulePath , PowerShell would load monkey365 into active memory: Import-Module monkey365 If monkey365 is not located on a PSModulePath path, you can use an explicit path to import: Import-Module C:\\temp\\monkey365 You can also use the Force parameter in case you want to reimport the monkey365 module into the same session Import-Module C:\\temp\\monkey365 -Force","title":"Import module"},{"location":"license-contributing/","text":"Monkey365 is licensed as Apache License 2.0 as specified in each PS1 file. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Additionaly, the following components are used in order to generate the HTML report: Bootstrap, MIT License - https://getbootstrap.com/docs/5.2/about/license/ DataTables, MIT License - https://www.datatables.net/license/mit MarkDig, BSD-2-Clause license - https://github.com/xoofx/markdig/blob/master/license.txt JQuery, MIT License - https://github.com/jquery/jquery/blob/main/LICENSE.txt Fontawesome, CC BY 4.0 License - https://fontawesome.com/license/free ChartJs, MIT License - https://github.com/chartjs/Chart.js/blob/master/LICENSE.md highlight.js, BSD 3-Clause license - https://github.com/highlightjs/highlight.js/blob/main/LICENSE Azure icons, Microsoft license - https://docs.microsoft.com/en-us/azure/architecture/icons/ Microsoft 365 icons, Microsoft license Monkey365 welcomes all types of contributions that will help us to refine the tool. Testing and feedback on different PowerShell modules and plugins are ways everyone can help in addition to module features or bug fixes, so any support would be much appreciated. If you are interested in contributing directly to Monkey365, here is how you can get started: Report issues Improve documentation Contribute code If you have what looks like a bug, or you would like to make a feature request, feel free to open a ticket on the Monkey365 repository on GitHub, but please, you should keep a few things in mind: Before you file an issue, please search existing issues to see if it is already covered Please include detailed information about how to reproduce the problem Thank you Thank you in advance for your contribution! For any questions or concerns feel free to contact me! Follow me on Twitter . Absolutely my DMs are open ;)","title":"License and Contributing"},{"location":"license-contributing/#thank-you","text":"Thank you in advance for your contribution! For any questions or concerns feel free to contact me! Follow me on Twitter . Absolutely my DMs are open ;)","title":"Thank you"},{"location":"permissions/","text":"The module will not change or modify any assets deployed in an Azure subscription. Monkey365's only perform read-only access operations. Monkey365 cannot manipulate or change data and cannot influence the resources within Azure or Microsoft 365. Depending on what workloads you are trying to connect, Monkey365 will require that the provided identity have the following roles according to the principle of least privilege: Azure AD and Azure environments Global Reader and Security Reader roles in all the subscriptions to assess Microsoft 365 environments Grant the given identity the role of Global Reader For SharePoint Online, grant the given identity the role of Sharepoint Administrator . Please note that Global Reader role can't access to SharePoint admin features as a reader using PowerShell. Please refer to the Global Reader notes on Microsoft.","title":"Permissions"},{"location":"support/","text":"Support Monkey365 uses GitHub Issues to track bugs and feature requests. Before you fill an issue, please search the existing issues to avoid duplicates. For new issues, file your bug or feature request as a new issue . For help, discussion, and support questions about using this project, join or start a discussion . Support for Monkey365 is limited to the resources listed above.","title":"Support"},{"location":"support/#support","text":"Monkey365 uses GitHub Issues to track bugs and feature requests. Before you fill an issue, please search the existing issues to avoid duplicates. For new issues, file your bug or feature request as a new issue . For help, discussion, and support questions about using this project, join or start a discussion . Support for Monkey365 is limited to the resources listed above.","title":"Support"},{"location":"configuration/azure-options/","text":"This section covers the supported options to help customize and automate scans for Azure environments. General options include: --Analysis Select the Azure resources used to gather data. Valid values are: Resource Value Databases Retrieves information from Azure databases, such as Azure SQL, Azure PostgreSQL or MariaDB virtualmachines Retrieves information from Azure virtual machines SecurityAlerts Retrieves information from security alers StorageAccounts Retrieves information from storage accounts SecurityBaseline Retrieves information from virtual machine's security baseline MissingPatches Retrieves information from potentially virtual machine's missing patches SecurityPolicies Retrieves information from security policy AppServices Retrieves information from App Services KeyVaults Retrieves information from Azure KeyVaults roleassignments Retrieves information from Azure RBAC SecurityContacts Retrieves information from Security Contacts All Retrieves all metadata from Azure subscription Subscriptions By default, Monkey365 will show the subscriptions to which the provided identity have access to. A user can select all the subscriptions to which the provided identity have access. The -subscriptions option can be used to scan a number of subscriptions in one execution. $param = @{ Instance = 'Azure'; Analysis = 'All'; PromptBehavior = 'SelectAccount'; subscriptions = '00000000-0000-0000-0000-000000000000 11111111-1111-1111-1111-111111111111'; TenantID = '00000000-0000-0000-0000-000000000000'; ExportTo = 'PRINT'; } $assets = Invoke-Monkey365 @param The -all_subscriptions option can be used to scan all the subscriptions. $param = @{ Instance = 'Azure'; Analysis = 'All'; PromptBehavior = 'SelectAccount'; all_subscriptions = $true; TenantID = '00000000-0000-0000-0000-000000000000'; ExportTo = 'PRINT'; } $assets = Invoke-Monkey365 @param Exclude azure resources from scans To ensure that all Azure resources are scanned, we recommend creating exclusions only when it is absolutely necessary. However, there are situations in which you may need to exclude an specific Azure resource, for example a Virtual Machine that is controlled by a third party integrations. The -ExcludedResources option can be used to exclude unwanted azure resources from being scanned. $param = @{ Instance = 'Azure'; Analysis = 'All'; PromptBehavior = 'SelectAccount'; all_subscriptions = $true; TenantID = '00000000-0000-0000-0000-000000000000'; ExcludedResources = 'C:\\temp\\az_excluded_resources.json'; ExportTo = 'HTML'; } Invoke-Monkey365 @param This parameter only accepts a JSON file path. This JSON file must have the following structure: { \"title\": \"Azure exclusion list\", \"exclusions\": [ { \"code\": \"Exclusion title\", \"suppress\": { \"pattern\": \"*mypattern*\", \"justification\": \"Justification text\" } } ] } Consider the following example of a JSON exclusion file to understand how to use the ExcludedResources feature: { \"title\": \"Azure exclusion list\", \"exclusions\": [ { \"code\": \"Azure VMs\", \"suppress\": { \"pattern\": \"*excludedmachine*\", \"justification\": \"Controlled by Third-Party integrations\" } }, { \"code\": \"Azure Storage account\", \"suppress\": { \"pattern\": \"*excludedstorageaccount*\", \"justification\": \"Controlled by Third-Party integrations\" } }, { \"code\": \"Azure Resource Group\", \"suppress\": { \"pattern\": \"*resourceGroups/excludedrg*\", \"justification\": \"Controlled by Third-Party integrations\" } }, { \"code\": \"Azure Containers\", \"suppress\": { \"pattern\": \"*resourceGroups/Containers*\", \"justification\": \"Controlled by Third-Party integrations\" } } ] }","title":"Azure Options"},{"location":"configuration/azure-options/#subscriptions","text":"By default, Monkey365 will show the subscriptions to which the provided identity have access to. A user can select all the subscriptions to which the provided identity have access. The -subscriptions option can be used to scan a number of subscriptions in one execution. $param = @{ Instance = 'Azure'; Analysis = 'All'; PromptBehavior = 'SelectAccount'; subscriptions = '00000000-0000-0000-0000-000000000000 11111111-1111-1111-1111-111111111111'; TenantID = '00000000-0000-0000-0000-000000000000'; ExportTo = 'PRINT'; } $assets = Invoke-Monkey365 @param The -all_subscriptions option can be used to scan all the subscriptions. $param = @{ Instance = 'Azure'; Analysis = 'All'; PromptBehavior = 'SelectAccount'; all_subscriptions = $true; TenantID = '00000000-0000-0000-0000-000000000000'; ExportTo = 'PRINT'; } $assets = Invoke-Monkey365 @param","title":"Subscriptions"},{"location":"configuration/azure-options/#exclude-azure-resources-from-scans","text":"To ensure that all Azure resources are scanned, we recommend creating exclusions only when it is absolutely necessary. However, there are situations in which you may need to exclude an specific Azure resource, for example a Virtual Machine that is controlled by a third party integrations. The -ExcludedResources option can be used to exclude unwanted azure resources from being scanned. $param = @{ Instance = 'Azure'; Analysis = 'All'; PromptBehavior = 'SelectAccount'; all_subscriptions = $true; TenantID = '00000000-0000-0000-0000-000000000000'; ExcludedResources = 'C:\\temp\\az_excluded_resources.json'; ExportTo = 'HTML'; } Invoke-Monkey365 @param This parameter only accepts a JSON file path. This JSON file must have the following structure: { \"title\": \"Azure exclusion list\", \"exclusions\": [ { \"code\": \"Exclusion title\", \"suppress\": { \"pattern\": \"*mypattern*\", \"justification\": \"Justification text\" } } ] } Consider the following example of a JSON exclusion file to understand how to use the ExcludedResources feature: { \"title\": \"Azure exclusion list\", \"exclusions\": [ { \"code\": \"Azure VMs\", \"suppress\": { \"pattern\": \"*excludedmachine*\", \"justification\": \"Controlled by Third-Party integrations\" } }, { \"code\": \"Azure Storage account\", \"suppress\": { \"pattern\": \"*excludedstorageaccount*\", \"justification\": \"Controlled by Third-Party integrations\" } }, { \"code\": \"Azure Resource Group\", \"suppress\": { \"pattern\": \"*resourceGroups/excludedrg*\", \"justification\": \"Controlled by Third-Party integrations\" } }, { \"code\": \"Azure Containers\", \"suppress\": { \"pattern\": \"*resourceGroups/Containers*\", \"justification\": \"Controlled by Third-Party integrations\" } } ] }","title":"Exclude azure resources from scans"},{"location":"configuration/configuration-file/","text":"The Monkey365 configuration file contains settings that are used for managing CLI behavior. The configuration file itself is located at $monkey365_DIR/config/monkey_365.config . Configuration file is written in the JSON file format. This file format is followed by a list of key-value entries. Also, Boolean is case-insensitive, and is represented by True (Enabled/must check) and False (Disabled/not check). The following is an example of a configuration file that sets up Monkey365 to use the 1.6 version of the Azure AD API but is also setting the dumpAdUsersWithInternalGraphAPI key to True . With this change, Monkey365 will use the internal (1.6-internal) API version to extract information regarding Azure AD users: \"azuread\": { \"usemsalAuth\": \"true\", \"userFilters\": [\"*\"], \"DirectoryRolesFilter\": [\"*\"], \"GroupFilter\": [\"*\"], \"AuditLogDaysAgo\": \"-7\", \"GetManagedApplicationsByPrincipalId\": \"true\", \"GetUserDetails\": \"true\", \"GetGroupMembers\": \"true\", \"useAzurePortalAPI\": \"true\", \"dumpAdUsersWithInternalGraphAPI\": \"true\", \"api_version\": \"1.6\", \"internal_api_version\": \"1.61-internal\", \"AuditLogFilter\": [ \"activityType\", \"correlationId\", \"tenantId\", \"activityOperationType\", \"activity\", \"activityDate\", \"actor\", \"actorType\", \"targetResourceType\", \"targetobjectId,targetName\", \"targetUserPrincipalName\", \"ChangeAttribute\", \"OldValue\", \"NewValue\" ] }","title":"Configuration File"},{"location":"configuration/general-options/","text":"Monkey365 supports many options to help customize and automate scans. General options include: -Environment It can be used to set the environment containing the Azure account. Valid values are: AzureChina AzureGermany AzurePublic AzureUSGovernment Note : Default value is AzurePublic -Instance Specifies the cloud provider to use. Valid values are: Azure Office365 -TenantID It can be used to force Monkey365 to sign in to a tenant -ResolveTenantDomainName It can be used to resolve the unique ID of the tenant name -ResolveTenantUserName It can be used to resolve the Tenant ID for a specific user -IncludeAzureActiveDirectory It can be used to get information from Azure Active Directory -SaveProject Saves project to a local folder (Default folder is monkey-reports) -ImportJob Import previously exported jobs -PromptBehavior Sets the behavior for authentication. Valid values are Always , Auto , Never , RefreshSession and SelectAccount -ForceAuth Force the prompt behavior and user will be prompted for credentials. Same as -PromptBehavior Always -RuleSet Specifies the path to JSON rules file. -ExcludePlugin This option can be used to exclude plugins from being executed. For example, there are situations when you may need to exclude an specific plugin, for example in tenants with thousands of users/mailboxed, that would slow down the scan. $param = @{ Instance = 'Microsoft365'; Analysis = 'ExchangeOnline'; PromptBehavior = 'SelectAccount'; TenantID = '00000000-0000-0000-0000-000000000000'; ExcludePlugin = exo0003, exo0004, exo0005; ExportTo = 'HTML'; } Invoke-Monkey365 @param","title":"General Options"},{"location":"configuration/microsoft365-options/","text":"This section covers the supported options to help customize and automate scans for Microsoft 365 environments. General options include: --Analysis Select the Microsoft 365 resources used to gather data. Valid values are: Resource Value ExchangeOnline Retrieves information from Exchange Online SharePointOnline Retrieves information from SharePoint Online, including lists, users, groups, orphaned users, etc.. PurView Retrieves information from Microsoft PurView MicrosoftTeams Retrieves information from Microsoft Teams IRM Retrieves information regarding rights management in Microsoft 365 MicrosoftForms Retrieves basic information from Microsoft Forms","title":"Microsoft365 Options"},{"location":"configuration/rate-limit/","text":"The Monkey365 tool runs with 2 threads by default. Additionally, Monkey365 handles rate limiting by implementing a MaxQueue value that configures the number of worker threads that are available for the tool. When the tool detects that the MaxQueue limit is reached, the Start-Sleep command will be used to delay requests for a fixed amount of time. This is often sufficient to complete a run. In addition to the default execution, the Threads option can be used to modify the default behavior. The following example will fetch data from specific Azure subscription and Tenant and then will export results to CSV. If credentials are not supplied, Monkey365 will prompt for credentials. In addition, the Threads flag is set to 4 . $param = @{ Instance = 'Azure'; Analysis = 'All'; PromptBehavior = 'SelectAccount'; subscriptions = '00000000-0000-0000-0000-000000000000'; TenantID = '00000000-0000-0000-0000-000000000000'; ExportTo = 'CSV'; Threads = 4; } $assets = Invoke-Monkey365 @param Regarding Exchange Online, and since the maximum number of remote connections allowed is 5, Monkey365 will limit the remote connections to one open remote PowerShell connection, regardless of number of configured threads. This is often enough to complete all jobs. For information regarding connecting Exchange Online, please refer to the installation notes on Microsoft: Connect to Exchange Online PowerShell","title":"Handle Rate Limit"},{"location":"docker/docker/","text":"Overview The docker image is an Ubuntu for Linux and Windows Server Core for Windows that comes with all pre-requisite components required to run Monkey365. These are non-root container images. Running the Container To run this image, use the build.ps1 script located in the root folder: .\\build.ps1 -Name monkey365 -version latest -Path .\\docker\\Dockerfile_linux This will create a new Monkey365 Docker image based on Ubuntu for Linux. The following command can be used to create a Windows-based container: .\\build.ps1 -Name monkey365 -version latest -Path .\\docker\\Dockerfile_windows Once container is created, you can run monkey365 container using docker run -it monkey365 Supported environment variables The following environment variables are supported: MONKEY_ENV_MONKEY_USER MONKEY_ENV_MONKEY_PASSWORD MONKEY_ENV_TENANT_ID MONKEY_ENV_SUBSCRIPTIONS MONKEY_ENV_ANALYSIS MONKEY_ENV_EXPORT_TO MONKEY_ENV_WRITELOG MONKEY_ENV_VERBOSE MONKEY_ENV_DEBUG You can also use the -e, --env, and --env-file flags to set simple environment variables in the container. docker run -it --env-file monkey.env monkey365 pwsh \"/home/monkey365/monkey365/monkey365.ps1\" In case you want to map a directory to a docker container directory, you can use the --volume flag, as shown below: docker run -it --env-file monkey.env ` -volume=C:\\temp:/home/monkey365/monkey365/monkey-reports ` monkey365 pwsh \"/home/monkey365/monkey365/monkey365.ps1\"","title":"Overview"},{"location":"docker/docker/#overview","text":"The docker image is an Ubuntu for Linux and Windows Server Core for Windows that comes with all pre-requisite components required to run Monkey365. These are non-root container images.","title":"Overview"},{"location":"docker/docker/#running-the-container","text":"To run this image, use the build.ps1 script located in the root folder: .\\build.ps1 -Name monkey365 -version latest -Path .\\docker\\Dockerfile_linux This will create a new Monkey365 Docker image based on Ubuntu for Linux. The following command can be used to create a Windows-based container: .\\build.ps1 -Name monkey365 -version latest -Path .\\docker\\Dockerfile_windows Once container is created, you can run monkey365 container using docker run -it monkey365","title":"Running the Container"},{"location":"docker/docker/#supported-environment-variables","text":"The following environment variables are supported: MONKEY_ENV_MONKEY_USER MONKEY_ENV_MONKEY_PASSWORD MONKEY_ENV_TENANT_ID MONKEY_ENV_SUBSCRIPTIONS MONKEY_ENV_ANALYSIS MONKEY_ENV_EXPORT_TO MONKEY_ENV_WRITELOG MONKEY_ENV_VERBOSE MONKEY_ENV_DEBUG You can also use the -e, --env, and --env-file flags to set simple environment variables in the container. docker run -it --env-file monkey.env monkey365 pwsh \"/home/monkey365/monkey365/monkey365.ps1\" In case you want to map a directory to a docker container directory, you can use the --volume flag, as shown below: docker run -it --env-file monkey.env ` -volume=C:\\temp:/home/monkey365/monkey365/monkey-reports ` monkey365 pwsh \"/home/monkey365/monkey365/monkey365.ps1\"","title":"Supported environment variables"},{"location":"exporting/export-excel/","text":"Although there is already support for a variety of file formats (CSV, JSON), there is also support for exporting all data to an EXCEL spreadsheet. Currently, it supports style modification, chart creation, company logo or independent language support. At the moment Office Excel 2010/2013/2016 are supported by Monkey365. The following example can be used to export all data to an Excel file. $param = @{ Instance = 'Azure'; Analysis = 'All'; PromptBehavior = 'SelectAccount'; all_subscriptions = $true; TenantID = '00000000-0000-0000-0000-000000000000'; ExportTo = 'EXCEL'; } $assets = Invoke-Monkey365 @param Please, note that the EXCEL application must be installed on the OS, as the script will create the Excel file by using the EXCEL COM interface. Please, also note that the EXCEL output is maintained only for legacy purposes, and it will be retired at some future.","title":"Excel"},{"location":"exporting/export-html/","text":"Monkey365 provides an internal module which provides methods to convert internal data to HTML format. Also, internal module adds additional support to Markdown syntax with Markdig . The following example can be used to export all data to an HTML file. $param = @{ Instance = 'Azure'; Analysis = 'All'; PromptBehavior = 'SelectAccount'; all_subscriptions = $true; TenantID = '00000000-0000-0000-0000-000000000000'; ExportTo = 'HTML'; } $assets = Invoke-Monkey365 @param Customize HTML A Monkey365 report uses JSON configuration files to visualize data in a variety of ways. This approach makes it easy to modify and combine tables, style them, and make them interactive with buttons. You can use your favorite text editor in order to modify these configuration files. HTML Configuration Files Location All the table formats are stored under Monkey365/core/html/htmlconf . Internal data is rendered with JQuery DataTables . Basic table and table as list are the available formats. Please, note that not all features of HTML tables are supported. HTML Table examples Table As List For example, table elements for Azure app services can be formatted to display complex structured data in the app_services.json file. { \"app_service_missing_identity\": [ { \"translate\": { \"name\": \"Application Name\", \"kind\": \"Kind\", \"location\": \"Location\", \"properties.defaultHostName\": \"HostName\", \"properties.httpsOnly\": \"Https Only\", \"identity.principalId\": \"Principal ID\", \"configuration.properties.ftpsState\": \"SSL FTP\", \"configuration.properties.minTlsVersion\": \"TLS Version\", \"configuration.properties.siteAuthSettings.Enabled\": \"Site Auth Enabled\" }, \"table\": \"asList\", \"emphasis\": [\"Principal ID\"] } ] } In the above example, this will result in the data being rendered in a single table formatted as list . Normal Table In this example, table elements for Storage accounts missing key rotation can be formatted to display complex structured data in the storage.json file. { \"storage_accounts_https_traffic_disabled\": [ { \"translate\": { \"name\": \"Name\", \"CreationTime\": \"Creation Time\", \"location\": \"Location\", \"supportsHttpsTrafficOnly\": \"Https Only\" }, \"table\": \"Normal\" } ], } The above example will result in the data being rendered in a single table formatted as normal table. Add Raw data button Table elements can be configured to show raw data on Bootstrap Modal. In order to route for showing raw data with modals, the showModalButton should be set to True , as shown below: { \"storage_accounts_missing_key_rotation\": [ { \"translate\": { \"name\": \"Name\", \"location\": \"Location\", \"ResourceGroupName\": \"ResourceGroupName\", \"isKeyRotated\": \"Key Rotated\" }, \"table\": \"Normal\", \"actions\":{ \"objectData\":{ \"expand\": [\"*\"], \"format\": \"json\" }, \"showGoToButton\":\"True\", \"showModalButton\":\"True\" } } ] } The above example will result in the data being rendered in a single table formatted as normal table, and a modal button in last column. Note This feature is only supported in tables formatted as a Normal table. Add direct link button Table elements can be configured to add a direct link to the Azure console section associated with the finding in the report. In order to route for showing raw data with modals, the showGoToButton should be set to True along with the actions , as shown below: { \"storage_accounts_missing_key_rotation\": [ { \"translate\": { \"name\": \"Name\", \"location\": \"Location\", \"ResourceGroupName\": \"ResourceGroupName\", \"isKeyRotated\": \"Key Rotated\" }, \"table\": \"Normal\", \"actions\":{ \"objectData\":{ \"expand\": [\"*\"], \"format\": \"json\" }, \"showGoToButton\":\"True\", \"showModalButton\":\"True\" } } ] } The above example will result in the data being rendered in a single table formatted as normal table, and a direct link button in last column. Note This feature is only supported in tables formatted as a Normal table. Please, also note that since this feature is experimental, we welcome your feedback.","title":"HTML"},{"location":"exporting/export-html/#customize-html","text":"A Monkey365 report uses JSON configuration files to visualize data in a variety of ways. This approach makes it easy to modify and combine tables, style them, and make them interactive with buttons. You can use your favorite text editor in order to modify these configuration files.","title":"Customize HTML"},{"location":"exporting/export-html/#html-configuration-files-location","text":"All the table formats are stored under Monkey365/core/html/htmlconf . Internal data is rendered with JQuery DataTables . Basic table and table as list are the available formats. Please, note that not all features of HTML tables are supported.","title":"HTML Configuration Files Location"},{"location":"exporting/export-html/#html-table-examples","text":"","title":"HTML Table examples"},{"location":"exporting/export-html/#table-as-list","text":"For example, table elements for Azure app services can be formatted to display complex structured data in the app_services.json file. { \"app_service_missing_identity\": [ { \"translate\": { \"name\": \"Application Name\", \"kind\": \"Kind\", \"location\": \"Location\", \"properties.defaultHostName\": \"HostName\", \"properties.httpsOnly\": \"Https Only\", \"identity.principalId\": \"Principal ID\", \"configuration.properties.ftpsState\": \"SSL FTP\", \"configuration.properties.minTlsVersion\": \"TLS Version\", \"configuration.properties.siteAuthSettings.Enabled\": \"Site Auth Enabled\" }, \"table\": \"asList\", \"emphasis\": [\"Principal ID\"] } ] } In the above example, this will result in the data being rendered in a single table formatted as list .","title":"Table As List"},{"location":"exporting/export-html/#normal-table","text":"In this example, table elements for Storage accounts missing key rotation can be formatted to display complex structured data in the storage.json file. { \"storage_accounts_https_traffic_disabled\": [ { \"translate\": { \"name\": \"Name\", \"CreationTime\": \"Creation Time\", \"location\": \"Location\", \"supportsHttpsTrafficOnly\": \"Https Only\" }, \"table\": \"Normal\" } ], } The above example will result in the data being rendered in a single table formatted as normal table.","title":"Normal Table"},{"location":"exporting/export-html/#add-raw-data-button","text":"Table elements can be configured to show raw data on Bootstrap Modal. In order to route for showing raw data with modals, the showModalButton should be set to True , as shown below: { \"storage_accounts_missing_key_rotation\": [ { \"translate\": { \"name\": \"Name\", \"location\": \"Location\", \"ResourceGroupName\": \"ResourceGroupName\", \"isKeyRotated\": \"Key Rotated\" }, \"table\": \"Normal\", \"actions\":{ \"objectData\":{ \"expand\": [\"*\"], \"format\": \"json\" }, \"showGoToButton\":\"True\", \"showModalButton\":\"True\" } } ] } The above example will result in the data being rendered in a single table formatted as normal table, and a modal button in last column. Note This feature is only supported in tables formatted as a Normal table.","title":"Add Raw data button"},{"location":"exporting/export-html/#add-direct-link-button","text":"Table elements can be configured to add a direct link to the Azure console section associated with the finding in the report. In order to route for showing raw data with modals, the showGoToButton should be set to True along with the actions , as shown below: { \"storage_accounts_missing_key_rotation\": [ { \"translate\": { \"name\": \"Name\", \"location\": \"Location\", \"ResourceGroupName\": \"ResourceGroupName\", \"isKeyRotated\": \"Key Rotated\" }, \"table\": \"Normal\", \"actions\":{ \"objectData\":{ \"expand\": [\"*\"], \"format\": \"json\" }, \"showGoToButton\":\"True\", \"showModalButton\":\"True\" } } ] } The above example will result in the data being rendered in a single table formatted as normal table, and a direct link button in last column. Note This feature is only supported in tables formatted as a Normal table. Please, also note that since this feature is experimental, we welcome your feedback.","title":"Add direct link button"},{"location":"exporting/exporting-data/","text":"Monkey365 has built-in support for exporting data to a large variety of formats, including CSV and JSON. For example, the CSV output format is a comma-separated output that can be imported into i.e., Excel spreadsheets. The JSON format is pretty similar to JavaScript object, so it can be used as a data format by any programming language. This section page documents how Monkey365's data may be exported to these formats. Data Location Depending on what format you are exporting to, the -ExportTo parameter presents you with slightly different options. Once Monkey365 has finished running, all the exported data are stored under Monkey365/monkey-reports/$GUID/$FORMAT/$FILE. The following demonstrates some examples in which the data may be programmatically accessed using various common languages. Import JSON data in Python The following code snippet illustrates how one may load the Monkey365 data in a Python script (assuming that report data was previously exported to JSON format): import json file = 'C:/temp/monkey365/monkey-reports/00000000-0000-0000-0000-000000000000/json/aad_domain_users.json' with open(file) as f: json_data = json.load(f) return json_data Import JSON data in PowerShell The following code snippet illustrates how one may load the Monkey365 data in a PowerShell script (assuming that report data was previously exported to JSON format): PS C:\\temp\\monkey365> $json_data = (Get-Content -Raw .\\monkey-reports\\00000000-0000-0000-0000-000000000000\\json\\aad_domain_users.json) | ConvertFrom-Json","title":"Overview"},{"location":"exporting/exporting-data/#data-location","text":"Depending on what format you are exporting to, the -ExportTo parameter presents you with slightly different options. Once Monkey365 has finished running, all the exported data are stored under Monkey365/monkey-reports/$GUID/$FORMAT/$FILE. The following demonstrates some examples in which the data may be programmatically accessed using various common languages.","title":"Data Location"},{"location":"exporting/exporting-data/#import-json-data-in-python","text":"The following code snippet illustrates how one may load the Monkey365 data in a Python script (assuming that report data was previously exported to JSON format): import json file = 'C:/temp/monkey365/monkey-reports/00000000-0000-0000-0000-000000000000/json/aad_domain_users.json' with open(file) as f: json_data = json.load(f) return json_data","title":"Import JSON data in Python"},{"location":"exporting/exporting-data/#import-json-data-in-powershell","text":"The following code snippet illustrates how one may load the Monkey365 data in a PowerShell script (assuming that report data was previously exported to JSON format): PS C:\\temp\\monkey365> $json_data = (Get-Content -Raw .\\monkey-reports\\00000000-0000-0000-0000-000000000000\\json\\aad_domain_users.json) | ConvertFrom-Json","title":"Import JSON data in PowerShell"},{"location":"logging/File/","text":"File logger The File plugin writes log events to a file. It supports which eventType can be written to a file. Example \"logging\": { \"default\":[ { \"name\": \"File\", \"type\": \"File\", \"configuration\": { \"filename\": \"monkey365_yyyyMMddhhmmss.log\", \"includeExceptions\": false, \"includeDebug\": false, \"includeVerbose\": false, \"includeError\": false } } ], \"loggers\":[ { \"name\": \"File\", \"type\": \"File\", \"configuration\": { \"filename\": \"monkey365_exceptions_yyyyMMddhhmmss.log\", \"includeExceptions\": true, \"includeDebug\": true, \"includeVerbose\": true, \"includeInfo\": false } } ] } Configuration name - Channel name type - File filename - The path of the file where logs will be written includeExceptions - whether or no exception streams will be written to file includeDebug - whether or no debug streams will be written to file includeVerbose - whether or no verbose streams will be written to file includeInfo - whether or no information streams will be written to file","title":"File logger"},{"location":"logging/File/#file-logger","text":"The File plugin writes log events to a file. It supports which eventType can be written to a file.","title":"File logger"},{"location":"logging/File/#example","text":"\"logging\": { \"default\":[ { \"name\": \"File\", \"type\": \"File\", \"configuration\": { \"filename\": \"monkey365_yyyyMMddhhmmss.log\", \"includeExceptions\": false, \"includeDebug\": false, \"includeVerbose\": false, \"includeError\": false } } ], \"loggers\":[ { \"name\": \"File\", \"type\": \"File\", \"configuration\": { \"filename\": \"monkey365_exceptions_yyyyMMddhhmmss.log\", \"includeExceptions\": true, \"includeDebug\": true, \"includeVerbose\": true, \"includeInfo\": false } } ] }","title":"Example"},{"location":"logging/File/#configuration","text":"name - Channel name type - File filename - The path of the file where logs will be written includeExceptions - whether or no exception streams will be written to file includeDebug - whether or no debug streams will be written to file includeVerbose - whether or no verbose streams will be written to file includeInfo - whether or no information streams will be written to file","title":"Configuration"},{"location":"logging/Slack/","text":"Slack logger The Slack plugin sends log events to a slack channel. Example \"logging\": { \"default\":[ { \"name\": \"File\", \"type\": \"File\", \"configuration\": { \"filename\": \"monkey365_yyyyMMddhhmmss.log\", \"includeExceptions\": false, \"includeDebug\": false, \"includeVerbose\": false, \"includeError\": false } } ], \"loggers\":[ { \"name\": \"Slack\", \"type\": \"Slack\", \"configuration\": { \"webHook\": \"https://hooks.slack.com/services/00000000000/00000000000/00000000000000000\", \"icon_emoji\": \":ghost:\", \"username\": \"monkey365\", \"channel\": \"#monkey365\", \"onlyExceptions\": true } } ] } Configuration name - Channel name type - Slack webHook - your Slack WebHook See the slack web api docs icon_emoji - the icon to use for the message username - the username to display with the message channel - the channel to send log messages onlyExceptions - Set to true in order to send only exceptions streams to Slack","title":"Slack logger"},{"location":"logging/Slack/#slack-logger","text":"The Slack plugin sends log events to a slack channel.","title":"Slack logger"},{"location":"logging/Slack/#example","text":"\"logging\": { \"default\":[ { \"name\": \"File\", \"type\": \"File\", \"configuration\": { \"filename\": \"monkey365_yyyyMMddhhmmss.log\", \"includeExceptions\": false, \"includeDebug\": false, \"includeVerbose\": false, \"includeError\": false } } ], \"loggers\":[ { \"name\": \"Slack\", \"type\": \"Slack\", \"configuration\": { \"webHook\": \"https://hooks.slack.com/services/00000000000/00000000000/00000000000000000\", \"icon_emoji\": \":ghost:\", \"username\": \"monkey365\", \"channel\": \"#monkey365\", \"onlyExceptions\": true } } ] }","title":"Example"},{"location":"logging/Slack/#configuration","text":"name - Channel name type - Slack webHook - your Slack WebHook See the slack web api docs icon_emoji - the icon to use for the message username - the username to display with the message channel - the channel to send log messages onlyExceptions - Set to true in order to send only exceptions streams to Slack","title":"Configuration"},{"location":"logging/Teams/","text":"Teams logger The Teams plugin sends log events to a Teams channel. Example \"logging\": { \"default\":[ { \"name\": \"File\", \"type\": \"File\", \"configuration\": { \"filename\": \"monkey365_yyyyMMddhhmmss.log\", \"includeExceptions\": false, \"includeDebug\": false, \"includeVerbose\": false, \"includeError\": false } } ], \"loggers\":[ { \"name\": \"Teams\", \"type\": \"Teams\", \"configuration\": { \"webHook\": \"https://tenantName.webhook.office.com/webhookb2/00000000000/00000000000/00000000000000000\", \"onlyExceptions\": true } } ] } Configuration name - Channel name type - Teams webHook - your Teams WebHook See the Microsoft Teams docs onlyExceptions - Set to true in order to send only exceptions streams to Slack","title":"Teams logger"},{"location":"logging/Teams/#teams-logger","text":"The Teams plugin sends log events to a Teams channel.","title":"Teams logger"},{"location":"logging/Teams/#example","text":"\"logging\": { \"default\":[ { \"name\": \"File\", \"type\": \"File\", \"configuration\": { \"filename\": \"monkey365_yyyyMMddhhmmss.log\", \"includeExceptions\": false, \"includeDebug\": false, \"includeVerbose\": false, \"includeError\": false } } ], \"loggers\":[ { \"name\": \"Teams\", \"type\": \"Teams\", \"configuration\": { \"webHook\": \"https://tenantName.webhook.office.com/webhookb2/00000000000/00000000000/00000000000000000\", \"onlyExceptions\": true } } ] }","title":"Example"},{"location":"logging/Teams/#configuration","text":"name - Channel name type - Teams webHook - your Teams WebHook See the Microsoft Teams docs onlyExceptions - Set to true in order to send only exceptions streams to Slack","title":"Configuration"},{"location":"logging/channels/","text":"Channels Channels serialise PowerShell log events to some form of output. Channels can be configured to write stream data to files, send emails, send data over the network, etc... For example: Example \"logging\": { \"default\":[ { \"name\": \"File\", \"type\": \"File\", \"configuration\": { \"filename\": \"monkey365_yyyyMMddhhmmss.log\", \"includeExceptions\": false, \"includeDebug\": false, \"includeVerbose\": false, \"includeError\": false } } ], \"loggers\":[ { \"name\": \"File\", \"type\": \"File\", \"configuration\": { \"filename\": \"monkey365_exceptions_yyyyMMddhhmmss.log\", \"includeExceptions\": true, \"includeDebug\": true, \"includeVerbose\": true, \"includeInfo\": false } }, { \"name\": \"Slack\", \"type\": \"Slack\", \"configuration\": { \"webHook\": \"https://hooks.slack.com/services/00000000000/00000000000/00000000000000000\", \"as_user\": \"false\", \"icon_emoji\": \":ghost:\", \"username\": \"monkey365\", \"channel\": \"#monkey365\", \"onlyExceptions\": true } } ] } In the above example, configuration file defines two channels named File and Slack .","title":"Channels"},{"location":"logging/channels/#channels","text":"Channels serialise PowerShell log events to some form of output. Channels can be configured to write stream data to files, send emails, send data over the network, etc... For example:","title":"Channels"},{"location":"logging/channels/#example","text":"\"logging\": { \"default\":[ { \"name\": \"File\", \"type\": \"File\", \"configuration\": { \"filename\": \"monkey365_yyyyMMddhhmmss.log\", \"includeExceptions\": false, \"includeDebug\": false, \"includeVerbose\": false, \"includeError\": false } } ], \"loggers\":[ { \"name\": \"File\", \"type\": \"File\", \"configuration\": { \"filename\": \"monkey365_exceptions_yyyyMMddhhmmss.log\", \"includeExceptions\": true, \"includeDebug\": true, \"includeVerbose\": true, \"includeInfo\": false } }, { \"name\": \"Slack\", \"type\": \"Slack\", \"configuration\": { \"webHook\": \"https://hooks.slack.com/services/00000000000/00000000000/00000000000000000\", \"as_user\": \"false\", \"icon_emoji\": \":ghost:\", \"username\": \"monkey365\", \"channel\": \"#monkey365\", \"onlyExceptions\": true } } ] } In the above example, configuration file defines two channels named File and Slack .","title":"Example"},{"location":"logging/introduction/","text":"Introduction The internal logging module provides a multi-channel logger which is used internally. The logger module is inspired by the excellent project Powershell Logging Module . This section outlines how to configure it. The internal module intercepts the Write-Information, Write-Warning, Write-Verbose, Write-Debug and Write-Error cmdlets by using proxy functions to first send messages to custom channels before sending stream data to their original commands from the Microsoft.PowerShell.Utility module. The MonkeyLogger will send stream data to enabled channels, which needs to be configured prior using. Each of these listeners will receive each of the stream data and then will be sent to some form of output. The easiest way to configure MonkeyLogger is to have configured listeners in the logging section within the monkey365/config/monkey_365.config file. See below for a practical example. Example \"logging\": { \"default\":[ { \"name\": \"File\", \"type\": \"File\", \"configuration\": { \"filename\": \"monkey365_yyyyMMddhhmmss.log\", \"includeExceptions\": false, \"includeDebug\": false, \"includeVerbose\": false, \"includeError\": false } } ] } In the above example, configuration file defines one type named File .","title":"Introduction"},{"location":"logging/introduction/#introduction","text":"The internal logging module provides a multi-channel logger which is used internally. The logger module is inspired by the excellent project Powershell Logging Module . This section outlines how to configure it. The internal module intercepts the Write-Information, Write-Warning, Write-Verbose, Write-Debug and Write-Error cmdlets by using proxy functions to first send messages to custom channels before sending stream data to their original commands from the Microsoft.PowerShell.Utility module. The MonkeyLogger will send stream data to enabled channels, which needs to be configured prior using. Each of these listeners will receive each of the stream data and then will be sent to some form of output. The easiest way to configure MonkeyLogger is to have configured listeners in the logging section within the monkey365/config/monkey_365.config file. See below for a practical example.","title":"Introduction"},{"location":"logging/introduction/#example","text":"\"logging\": { \"default\":[ { \"name\": \"File\", \"type\": \"File\", \"configuration\": { \"filename\": \"monkey365_yyyyMMddhhmmss.log\", \"includeExceptions\": false, \"includeDebug\": false, \"includeVerbose\": false, \"includeError\": false } } ] } In the above example, configuration file defines one type named File .","title":"Example"},{"location":"security_checks/custom-rule/","text":"Create a rule Monkey365 enable users to create rules, both simple and complex, to tell Monkey365 which objects to check, the conditions to check, and the corresponding actions to perform when conditions occur. You can use Monkey365 to create rules for internal data objects piped to Monkey365 for validation. Rule Body A rule is described in JSON. A single rule can be used to represent complex rules. A rule has an issue_name and a list of conditions that are evaluated when the rule is triggered. Scenario - Check for remote PowerShell enabled users In this quickstart scenario, we have been tasked with creating a rule to check for the presence of remote PowerShell enabled users in Exchange Online. When a user with the RemotePowerShellEnabled enabled attribute is found the rule should fail. To check the remote PowerShell access status for users, create a JSON rule with the following contents. This file can be created in any text editor, such as Notepad++ or Visual Studio Code. Please, note that you must save the new rule at $monkey365_DIR/rules/findings directory. { \"dashboard_name\": \"Exchange Online\", \"menu_name\": \"Microsoft 365\", \"issue_name\": \"Exchange Online Remote PowerShell Access Enabled\", \"description\": \"It was possible for users to access the Exchange Online Remote PowerShell on the Microsoft 365 environment.\", \"references\": [ \"https://docs.microsoft.com/en-us/powershell/exchange/disable-access-to-exchange-online-powershell?view=exchange-ps\" ], \"compliance\": [ [ \"Monkey365 rule\" ] ], \"path\": \"o365_exo_users\", \"display_path\": \"o365_exo_users\", \"conditions\": [ \"and\", [ \"RemotePowerShellEnabled\", \"ne\", \"False\" ] ], \"id_suffix\": \"o365_exo_users_remote_ps_enabled\" } 1.- dashboard_name : This is the friendly name of the application/service that is checked, displayed on the HTML dashboard. 2.- menu_name : This is the friendly name of the provider, which is displayed on the HTML sidebar. 3.- issue_name : The rule name. 4.- description : The rule description. Rule description supports Markdown . That way you can add links and apply minor text styles. 5.- references : This parameter is optional. You can add external links in order to help consultants find more information about findings. Result output will sometimes be more than enough to explain what the issue is, but it can also be beneficial to explain why an issue exists, and this is a great place to do that. Additional elements such as remediation or rationale can be added to existing JSON rule. Both of them supports Markdown . 6.- The condition property determines the checks Monkey365 will use to test each user returned in Exchange Online. Specifically, the RemotePowerShellEnabled property of each user object will be evaluated. The value of RemotePowerShellEnabled should not be False . Multiple PowerShell comparison operators are supported. The following link is a list of comparison operators supported by PowerShell. 7.- Name your rule with a unique name .Json. Testing rules You can either create a new JSON ruleset from scratch or edit an existing one and add your custom rule. The following is an example of a custom ruleset with one rule. { \"about\": \"My custom ruleset\", \"rules\": { \"exchange-users-remote-powershell-enabled.json\": [ { \"enabled\": true, \"level\": \"medium\" } ] } } If users with remote PowerShell session are discovered, results will be displayed in the HTML report, as shown below: You can customize HTML tables in order to visualize data in a variety of ways. More information about how to customize data can be found here .","title":"Create a custom rule"},{"location":"security_checks/custom-rule/#create-a-rule","text":"Monkey365 enable users to create rules, both simple and complex, to tell Monkey365 which objects to check, the conditions to check, and the corresponding actions to perform when conditions occur. You can use Monkey365 to create rules for internal data objects piped to Monkey365 for validation.","title":"Create a rule"},{"location":"security_checks/custom-rule/#rule-body","text":"A rule is described in JSON. A single rule can be used to represent complex rules. A rule has an issue_name and a list of conditions that are evaluated when the rule is triggered.","title":"Rule Body"},{"location":"security_checks/custom-rule/#scenario-check-for-remote-powershell-enabled-users","text":"In this quickstart scenario, we have been tasked with creating a rule to check for the presence of remote PowerShell enabled users in Exchange Online. When a user with the RemotePowerShellEnabled enabled attribute is found the rule should fail. To check the remote PowerShell access status for users, create a JSON rule with the following contents. This file can be created in any text editor, such as Notepad++ or Visual Studio Code. Please, note that you must save the new rule at $monkey365_DIR/rules/findings directory. { \"dashboard_name\": \"Exchange Online\", \"menu_name\": \"Microsoft 365\", \"issue_name\": \"Exchange Online Remote PowerShell Access Enabled\", \"description\": \"It was possible for users to access the Exchange Online Remote PowerShell on the Microsoft 365 environment.\", \"references\": [ \"https://docs.microsoft.com/en-us/powershell/exchange/disable-access-to-exchange-online-powershell?view=exchange-ps\" ], \"compliance\": [ [ \"Monkey365 rule\" ] ], \"path\": \"o365_exo_users\", \"display_path\": \"o365_exo_users\", \"conditions\": [ \"and\", [ \"RemotePowerShellEnabled\", \"ne\", \"False\" ] ], \"id_suffix\": \"o365_exo_users_remote_ps_enabled\" } 1.- dashboard_name : This is the friendly name of the application/service that is checked, displayed on the HTML dashboard. 2.- menu_name : This is the friendly name of the provider, which is displayed on the HTML sidebar. 3.- issue_name : The rule name. 4.- description : The rule description. Rule description supports Markdown . That way you can add links and apply minor text styles. 5.- references : This parameter is optional. You can add external links in order to help consultants find more information about findings. Result output will sometimes be more than enough to explain what the issue is, but it can also be beneficial to explain why an issue exists, and this is a great place to do that. Additional elements such as remediation or rationale can be added to existing JSON rule. Both of them supports Markdown . 6.- The condition property determines the checks Monkey365 will use to test each user returned in Exchange Online. Specifically, the RemotePowerShellEnabled property of each user object will be evaluated. The value of RemotePowerShellEnabled should not be False . Multiple PowerShell comparison operators are supported. The following link is a list of comparison operators supported by PowerShell. 7.- Name your rule with a unique name .Json.","title":"Scenario - Check for remote PowerShell enabled users"},{"location":"security_checks/custom-rule/#testing-rules","text":"You can either create a new JSON ruleset from scratch or edit an existing one and add your custom rule. The following is an example of a custom ruleset with one rule. { \"about\": \"My custom ruleset\", \"rules\": { \"exchange-users-remote-powershell-enabled.json\": [ { \"enabled\": true, \"level\": \"medium\" } ] } } If users with remote PowerShell session are discovered, results will be displayed in the HTML report, as shown below: You can customize HTML tables in order to visualize data in a variety of ways. More information about how to customize data can be found here .","title":"Testing rules"},{"location":"security_checks/custom-ruleset/","text":"Custom rulesets Customizing existing rulesets for Azure or Microsoft 365 might be all you need at first, but at some point, you will want to make a custom ruleset. For example, the CIS Benchmark rulesets help check for recommended hardening policies and best practices, but you could create a custom ruleset to be used for analyzing an specific tenant or subscription. With this approach you can ignore specific rules you want and set the desired severity of these rules. You can either create a new JSON ruleset from scratch or edit an existing one. We recommend starting by editing an existing ruleset so that you have the base structure already in place. Later on, you can create a new ruleset from the beginning. Adding rules Add your own rules under the rules property in your JSON rule file. level The level keyword is optional and can be critical, high, medium, low, or info. If not set, the default value is info. Disabling Rules There are situations in which you might want to enable all rules by default, and disable a few. The enabled keyword is mandatory and can be true , or false . Extending Rules In some cases you might want to apply a limited number of rules from another ruleset. To do this, use the extends property with the path of the ruleset. This will load rules from the extended ruleset. Overrides To customize the behavior of an specific rule, you can override the ruleset at deployment. When you override a rule you specify changes to be modified on top of the default ruleset. These changes will take precedence over the rule\u2019s default behavior. Working with overrides You can override a rule at two levels: args compliance For example overrides provide a way to replace the compliance value in your rule with another version. Some of existing rules may require parameters, such as port, UUID, etc.. This rule definition can be referenced multiple times in the custom ruleset, and some of its values overridden by the ruleset. Run Monkey365 with the new ruleset After you have finished creating the ruleset file, you will need to use the RuleSet parameter to load the ruleset, as shown below: $param = @{ Instance = 'Microsoft365'; Analysis = 'ExchangeOnline'; PromptBehavior = 'SelectAccount'; TenantID = '00000000-0000-0000-0000-000000000000'; RuleSet = C:\\temp\\myruleset.json; ExportTo = 'HTML'; } Invoke-Monkey365 @param You may want to use the previously created ruleset with saved projects. The following example shows how to use ImportJob and the RuleSet options: $param = @{ ImportJob = $True; RuleSet = C:\\temp\\myruleset.json; ExportTo = 'HTML'; } Invoke-Monkey365 @param","title":"Custom ruleset"},{"location":"security_checks/custom-ruleset/#custom-rulesets","text":"Customizing existing rulesets for Azure or Microsoft 365 might be all you need at first, but at some point, you will want to make a custom ruleset. For example, the CIS Benchmark rulesets help check for recommended hardening policies and best practices, but you could create a custom ruleset to be used for analyzing an specific tenant or subscription. With this approach you can ignore specific rules you want and set the desired severity of these rules. You can either create a new JSON ruleset from scratch or edit an existing one. We recommend starting by editing an existing ruleset so that you have the base structure already in place. Later on, you can create a new ruleset from the beginning.","title":"Custom rulesets"},{"location":"security_checks/custom-ruleset/#adding-rules","text":"Add your own rules under the rules property in your JSON rule file.","title":"Adding rules"},{"location":"security_checks/custom-ruleset/#level","text":"The level keyword is optional and can be critical, high, medium, low, or info. If not set, the default value is info.","title":"level"},{"location":"security_checks/custom-ruleset/#disabling-rules","text":"There are situations in which you might want to enable all rules by default, and disable a few. The enabled keyword is mandatory and can be true , or false .","title":"Disabling Rules"},{"location":"security_checks/custom-ruleset/#extending-rules","text":"In some cases you might want to apply a limited number of rules from another ruleset. To do this, use the extends property with the path of the ruleset. This will load rules from the extended ruleset.","title":"Extending Rules"},{"location":"security_checks/custom-ruleset/#overrides","text":"To customize the behavior of an specific rule, you can override the ruleset at deployment. When you override a rule you specify changes to be modified on top of the default ruleset. These changes will take precedence over the rule\u2019s default behavior.","title":"Overrides"},{"location":"security_checks/custom-ruleset/#working-with-overrides","text":"You can override a rule at two levels: args compliance For example overrides provide a way to replace the compliance value in your rule with another version. Some of existing rules may require parameters, such as port, UUID, etc.. This rule definition can be referenced multiple times in the custom ruleset, and some of its values overridden by the ruleset.","title":"Working with overrides"},{"location":"security_checks/custom-ruleset/#run-monkey365-with-the-new-ruleset","text":"After you have finished creating the ruleset file, you will need to use the RuleSet parameter to load the ruleset, as shown below: $param = @{ Instance = 'Microsoft365'; Analysis = 'ExchangeOnline'; PromptBehavior = 'SelectAccount'; TenantID = '00000000-0000-0000-0000-000000000000'; RuleSet = C:\\temp\\myruleset.json; ExportTo = 'HTML'; } Invoke-Monkey365 @param You may want to use the previously created ruleset with saved projects. The following example shows how to use ImportJob and the RuleSet options: $param = @{ ImportJob = $True; RuleSet = C:\\temp\\myruleset.json; ExportTo = 'HTML'; } Invoke-Monkey365 @param","title":"Run Monkey365 with the new ruleset"},{"location":"security_checks/overview/","text":"Overview Monkey365 helps streamline the process of performing not only Microsoft 365, but also Azure subscriptions and Azure Active Directory Security Reviews. 160+ checks covering industry defined security best practices for Microsoft 365, Azure and Azure Active Directory. All rulesets are located at $monkey365_DIR/rules/ruleset directory. Monkey365 will help consultants to assess cloud environment and to analyze the risk factors according to controls and best practices. The report will contain structured data for quick checking and verification of the results. Supported standards By default, the HTML report shows you the CIS (Center for Internet Security) Benchmark. The CIS Benchmarks for Azure and Microsoft 365 are guidelines for security and compliance best practices. The following standards are supported by Monkey365: CIS Microsoft Azure Foundations Benchmark v1.4.0 CIS Microsoft 365 Foundations Benchmark v1.4.0 More standards will be added in next releases (NIST, HIPAA, GDPR, PCI-DSS, etc..) as they are available. Notes about security controls For each standard, and depending on the environment, there is a list of applicable controls. Depending on the standard, some checks may be procedure, or process related best-practices, so this can't be verified by Monkey365. Some of them don't have any rule implemented yet, but will have in the future.","title":"Overview"},{"location":"security_checks/overview/#overview","text":"Monkey365 helps streamline the process of performing not only Microsoft 365, but also Azure subscriptions and Azure Active Directory Security Reviews. 160+ checks covering industry defined security best practices for Microsoft 365, Azure and Azure Active Directory. All rulesets are located at $monkey365_DIR/rules/ruleset directory. Monkey365 will help consultants to assess cloud environment and to analyze the risk factors according to controls and best practices. The report will contain structured data for quick checking and verification of the results.","title":"Overview"},{"location":"security_checks/overview/#supported-standards","text":"By default, the HTML report shows you the CIS (Center for Internet Security) Benchmark. The CIS Benchmarks for Azure and Microsoft 365 are guidelines for security and compliance best practices. The following standards are supported by Monkey365: CIS Microsoft Azure Foundations Benchmark v1.4.0 CIS Microsoft 365 Foundations Benchmark v1.4.0 More standards will be added in next releases (NIST, HIPAA, GDPR, PCI-DSS, etc..) as they are available.","title":"Supported standards"},{"location":"security_checks/overview/#notes-about-security-controls","text":"For each standard, and depending on the environment, there is a list of applicable controls. Depending on the standard, some checks may be procedure, or process related best-practices, so this can't be verified by Monkey365. Some of them don't have any rule implemented yet, but will have in the future.","title":"Notes about security controls"}]}